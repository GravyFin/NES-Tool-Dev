;
; File generated by cc65 v 2.19 - Git 4dfbccf
;
	.fopt		compiler,"cc65 v 2.19 - Git 4dfbccf"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_pad_poll
	.import		_vram_adr
	.import		_vram_unrle
	.import		_get_pad_new
	.export		_all_bgs
	.export		_pad1
	.export		_pad1_new
	.export		_which_chr
	.export		_pal_apple
	.export		_pal_ball
	.export		_pal_snake
	.export		_pal_flower
	.export		_palettes
	.export		_bus_conflict_fix
	.export		_main

.segment	"RODATA"

_all_bgs:
	.byte	$ff
	.byte	$00
	.byte	$ff
	.byte	$c8
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0a
	.byte	$0b
	.byte	$0c
	.byte	$0d
	.byte	$0e
	.byte	$0f
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1a
	.byte	$1b
	.byte	$1c
	.byte	$1d
	.byte	$1e
	.byte	$1f
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2a
	.byte	$2b
	.byte	$2c
	.byte	$2d
	.byte	$2e
	.byte	$2f
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3a
	.byte	$3b
	.byte	$3c
	.byte	$3d
	.byte	$3e
	.byte	$3f
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4a
	.byte	$4b
	.byte	$4c
	.byte	$4d
	.byte	$4e
	.byte	$4f
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5a
	.byte	$5b
	.byte	$5c
	.byte	$5d
	.byte	$5e
	.byte	$5f
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6a
	.byte	$6b
	.byte	$6c
	.byte	$6d
	.byte	$6e
	.byte	$6f
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$7a
	.byte	$7b
	.byte	$7c
	.byte	$7d
	.byte	$7e
	.byte	$7f
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8a
	.byte	$8b
	.byte	$8c
	.byte	$8d
	.byte	$8e
	.byte	$8f
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9a
	.byte	$9b
	.byte	$9c
	.byte	$9d
	.byte	$9e
	.byte	$9f
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$a0
	.byte	$a1
	.byte	$a2
	.byte	$a3
	.byte	$a4
	.byte	$a5
	.byte	$a6
	.byte	$a7
	.byte	$a8
	.byte	$a9
	.byte	$aa
	.byte	$ab
	.byte	$ac
	.byte	$ad
	.byte	$ae
	.byte	$af
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$b0
	.byte	$b1
	.byte	$b2
	.byte	$b3
	.byte	$b4
	.byte	$b5
	.byte	$b6
	.byte	$b7
	.byte	$b8
	.byte	$b9
	.byte	$ba
	.byte	$bb
	.byte	$bc
	.byte	$bd
	.byte	$be
	.byte	$bf
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$c0
	.byte	$c1
	.byte	$c2
	.byte	$c3
	.byte	$c4
	.byte	$c5
	.byte	$c6
	.byte	$c7
	.byte	$c8
	.byte	$c9
	.byte	$ca
	.byte	$cb
	.byte	$cc
	.byte	$cd
	.byte	$ce
	.byte	$cf
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$d0
	.byte	$d1
	.byte	$d2
	.byte	$d3
	.byte	$d4
	.byte	$d5
	.byte	$d6
	.byte	$d7
	.byte	$d8
	.byte	$d9
	.byte	$da
	.byte	$db
	.byte	$dc
	.byte	$dd
	.byte	$de
	.byte	$df
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$e0
	.byte	$e1
	.byte	$e2
	.byte	$e3
	.byte	$e4
	.byte	$e5
	.byte	$e6
	.byte	$e7
	.byte	$e8
	.byte	$e9
	.byte	$ea
	.byte	$eb
	.byte	$ec
	.byte	$ed
	.byte	$ee
	.byte	$ef
	.byte	$00
	.byte	$ff
	.byte	$0f
	.byte	$f0
	.byte	$f1
	.byte	$f2
	.byte	$f3
	.byte	$f4
	.byte	$f5
	.byte	$f6
	.byte	$f7
	.byte	$f8
	.byte	$f9
	.byte	$fa
	.byte	$fb
	.byte	$fc
	.byte	$fd
	.byte	$fe
	.byte	$00
	.byte	$ff
	.byte	$fe
	.byte	$00
	.byte	$ff
	.byte	$48
	.byte	$00
	.byte	$ff
	.byte	$00
_pal_apple:
	.byte	$08
	.byte	$16
	.byte	$27
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_pal_ball:
	.byte	$06
	.byte	$27
	.byte	$12
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_pal_snake:
	.byte	$0f
	.byte	$17
	.byte	$29
	.byte	$39
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_pal_flower:
	.byte	$08
	.byte	$19
	.byte	$27
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palettes:
	.addr	_pal_apple
	.addr	_pal_ball
	.addr	_pal_snake
	.addr	_pal_flower
_bus_conflict_fix:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_which_chr:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(pal_apple); // load the palette
;
	lda     #<(_pal_apple)
	ldx     #>(_pal_apple)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(all_bgs);
;
	lda     #<(_all_bgs)
	ldx     #>(_all_bgs)
	jsr     _vram_unrle
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi();
;
L0002:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if(pad1_new & PAD_START){
;
	and     #$10
	beq     L0002
;
; ++which_chr;
;
	inc     _which_chr
;
; if(which_chr >= 4) which_chr = 0;
;
	lda     _which_chr
	cmp     #$04
	ldx     #$00
	bcc     L000A
	stx     _which_chr
;
; pal_bg(palettes[which_chr]); // change the bg palette
;
L000A:	lda     _which_chr
	asl     a
	bcc     L0009
	inx
	clc
L0009:	adc     #<(_palettes)
	sta     ptr1
	txa
	adc     #>(_palettes)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_bg
;
; POKE(bus_conflict_fix+which_chr, which_chr); // change the tileset
;
	ldy     _which_chr
	lda     _which_chr
	sta     _bus_conflict_fix,y
;
; while (1){
;
	jmp     L0002

.endproc

