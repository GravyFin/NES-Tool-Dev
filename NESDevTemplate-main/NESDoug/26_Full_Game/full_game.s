;
; File generated by cc65 v 2.19 - Git 4dfbccf
;
	.fopt		compiler,"cc65 v 2.19 - Git 4dfbccf"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_music_play
	.import		_music_stop
	.import		_sfx_play
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_fill
	.import		_vram_unrle
	.import		_memcpy
	.import		_delay
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_get_frame_count
	.import		_set_music_speed
	.import		_check_collision
	.import		_pal_fade_to
	.import		_set_scroll_x
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.import		_color_emphasis
	.export		_RoundSprL
	.export		_RoundSprR
	.export		_CoinSpr
	.export		_BigCoinSpr
	.export		_CoinHud
	.export		_EnemyChaseSpr
	.export		_EnemyBounceSpr
	.export		_EnemyBounceSpr2
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_direction
	.export		_address
	.export		_x
	.export		_y
	.export		_nt
	.export		_index
	.export		_index2
	.export		_room
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_scroll_count
	.export		_pseudo_scroll_x
	.export		_L_R_switch
	.export		_old_x
	.export		_temp_x
	.export		_temp_y
	.export		_song
	.export		_game_mode
	.export		_coins
	.export		_lives
	.export		_pointer
	.export		_level
	.export		_offset
	.export		_level_up
	.export		_bright
	.export		_bright_count
	.export		_death
	.export		_timer
	.export		_enemy_frames
	.export		_map_loaded
	.export		_short_jump_count
	.export		_temp_room
	.export		_c_map
	.export		_c_map2
	.export		_Generic
	.export		_Generic2
	.export		_BoxGuy1
	.export		_coin_x
	.export		_coin_y
	.export		_coin_active
	.export		_coin_room
	.export		_coin_actual_x
	.export		_coin_type
	.export		_enemy_x
	.export		_enemy_y
	.export		_enemy_active
	.export		_enemy_room
	.export		_enemy_actual_x
	.export		_enemy_type
	.export		_enemy_anim
	.export		_shuffle_array
	.export		_palette_title
	.export		_title_color_rotate
	.export		_palette_bg
	.export		_palette_sp
	.export		_END_TEXT
	.export		_END_TEXT2
	.export		_END_TEXT3
	.export		_DEAD_TEXT
	.export		_title
	.export		_load_title
	.export		_load_room
	.export		_draw_sprites
	.export		_movement
	.export		_draw_screen_R
	.export		_new_cmap
	.export		_bg_collision_sub
	.export		_get_position
	.export		_enemy_moves
	.export		_sprite_collisions
	.export		_check_spr_objects
	.export		_sprite_obj_init
	.export		_bg_collision_fast
	.export		_bg_coll_L
	.export		_bg_coll_R
	.export		_bg_coll_U
	.export		_bg_coll_D
	.export		_bg_coll_D2
	.export		_level_1_coins
	.export		_level_2_coins
	.export		_level_3_coins
	.export		_Coins_list
	.export		_level_1_enemies
	.export		_level_2_enemies
	.export		_level_3_enemies
	.export		_Enemy_list
	.export		_metatiles1
	.export		_is_solid
	.export		_Level1_0
	.export		_Level1_1
	.export		_Level1_2
	.export		_Level1_3
	.export		_Level1_4
	.export		_Level1_5
	.export		_Level1_6
	.export		_Level1_7
	.export		_Level1_list
	.export		_Level2_0
	.export		_Level2_1
	.export		_Level2_2
	.export		_Level2_3
	.export		_Level2_4
	.export		_Level2_5
	.export		_Level2_6
	.export		_Level2_7
	.export		_Level2_list
	.export		_Level3_0
	.export		_Level3_1
	.export		_Level3_2
	.export		_Level3_3
	.export		_Level3_4
	.export		_Level3_5
	.export		_Level3_6
	.export		_Level3_7
	.export		_Level3_list
	.export		_Levels_list
	.export		_Level_offsets
	.export		_bounce
	.export		_main

.segment	"DATA"

_bounce:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01

.segment	"RODATA"

_RoundSprL:
	.byte	$ff
	.byte	$fc
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$fc
	.byte	$03
	.byte	$00
	.byte	$ff
	.byte	$04
	.byte	$12
	.byte	$00
	.byte	$07
	.byte	$04
	.byte	$13
	.byte	$00
	.byte	$80
_RoundSprR:
	.byte	$ff
	.byte	$fc
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$fc
	.byte	$01
	.byte	$00
	.byte	$ff
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$04
	.byte	$11
	.byte	$00
	.byte	$80
_CoinSpr:
	.byte	$ff
	.byte	$ff
	.byte	$20
	.byte	$01
	.byte	$ff
	.byte	$07
	.byte	$30
	.byte	$01
	.byte	$80
_BigCoinSpr:
	.byte	$ff
	.byte	$ff
	.byte	$21
	.byte	$01
	.byte	$ff
	.byte	$07
	.byte	$31
	.byte	$01
	.byte	$07
	.byte	$ff
	.byte	$22
	.byte	$01
	.byte	$07
	.byte	$07
	.byte	$32
	.byte	$01
	.byte	$80
_CoinHud:
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$24
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$33
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$34
	.byte	$01
	.byte	$80
_EnemyChaseSpr:
	.byte	$ff
	.byte	$ff
	.byte	$04
	.byte	$02
	.byte	$07
	.byte	$ff
	.byte	$05
	.byte	$02
	.byte	$ff
	.byte	$07
	.byte	$14
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$02
	.byte	$80
_EnemyBounceSpr:
	.byte	$ff
	.byte	$ff
	.byte	$06
	.byte	$03
	.byte	$07
	.byte	$ff
	.byte	$07
	.byte	$03
	.byte	$ff
	.byte	$07
	.byte	$16
	.byte	$03
	.byte	$07
	.byte	$07
	.byte	$17
	.byte	$03
	.byte	$80
_EnemyBounceSpr2:
	.byte	$ff
	.byte	$ff
	.byte	$04
	.byte	$03
	.byte	$07
	.byte	$ff
	.byte	$05
	.byte	$03
	.byte	$ff
	.byte	$07
	.byte	$14
	.byte	$03
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$03
	.byte	$80
_shuffle_array:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0a
	.byte	$0b
	.byte	$0c
	.byte	$0d
	.byte	$0e
	.byte	$0f
	.byte	$0f
	.byte	$0e
	.byte	$0d
	.byte	$0c
	.byte	$0b
	.byte	$0a
	.byte	$09
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$08
	.byte	$0a
	.byte	$0c
	.byte	$0e
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$07
	.byte	$09
	.byte	$0b
	.byte	$0d
	.byte	$0f
	.byte	$0f
	.byte	$0d
	.byte	$0b
	.byte	$09
	.byte	$07
	.byte	$05
	.byte	$03
	.byte	$01
	.byte	$0e
	.byte	$0c
	.byte	$0a
	.byte	$08
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$00
_palette_title:
	.byte	$0f
	.byte	$04
	.byte	$15
	.byte	$32
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_title_color_rotate:
	.byte	$32
	.byte	$22
	.byte	$30
	.byte	$37
_palette_bg:
	.byte	$22
	.byte	$16
	.byte	$26
	.byte	$06
	.byte	$22
	.byte	$17
	.byte	$19
	.byte	$29
	.byte	$22
	.byte	$17
	.byte	$07
	.byte	$10
	.byte	$22
	.byte	$08
	.byte	$19
	.byte	$29
_palette_sp:
	.byte	$22
	.byte	$01
	.byte	$11
	.byte	$10
	.byte	$22
	.byte	$17
	.byte	$28
	.byte	$38
	.byte	$22
	.byte	$0c
	.byte	$2c
	.byte	$30
	.byte	$22
	.byte	$03
	.byte	$13
	.byte	$33
_END_TEXT:
	.byte	$54,$68,$65,$20,$65,$6E,$64,$20,$6F,$66,$20,$74,$68,$65,$20,$67
	.byte	$61,$6D,$65,$2E,$00
_END_TEXT2:
	.byte	$49,$20,$67,$75,$65,$73,$73,$20,$79,$6F,$75,$20,$77,$6F,$6E,$3F
	.byte	$00
_END_TEXT3:
	.byte	$43,$6F,$69,$6E,$73,$3A,$20,$00
_DEAD_TEXT:
	.byte	$59,$6F,$75,$20,$64,$69,$65,$64,$2E,$00
_title:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$fe
	.byte	$00
	.byte	$01
	.byte	$0b
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8a
	.byte	$00
	.byte	$01
	.byte	$14
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9a
	.byte	$00
	.byte	$01
	.byte	$14
	.byte	$a0
	.byte	$a1
	.byte	$a2
	.byte	$a3
	.byte	$a4
	.byte	$a5
	.byte	$a6
	.byte	$a7
	.byte	$a8
	.byte	$a9
	.byte	$aa
	.byte	$00
	.byte	$01
	.byte	$32
	.byte	$b0
	.byte	$b1
	.byte	$b2
	.byte	$b3
	.byte	$b4
	.byte	$b5
	.byte	$b6
	.byte	$b7
	.byte	$b8
	.byte	$b9
	.byte	$ba
	.byte	$bb
	.byte	$bc
	.byte	$bd
	.byte	$be
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$c0
	.byte	$c1
	.byte	$c2
	.byte	$c3
	.byte	$c4
	.byte	$c5
	.byte	$c6
	.byte	$c7
	.byte	$c8
	.byte	$c9
	.byte	$ca
	.byte	$cb
	.byte	$cc
	.byte	$cd
	.byte	$ce
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$d0
	.byte	$d1
	.byte	$d2
	.byte	$d3
	.byte	$d4
	.byte	$d5
	.byte	$d6
	.byte	$d7
	.byte	$d8
	.byte	$d9
	.byte	$da
	.byte	$db
	.byte	$dc
	.byte	$dd
	.byte	$de
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$e0
	.byte	$e1
	.byte	$e2
	.byte	$e3
	.byte	$e4
	.byte	$e5
	.byte	$e6
	.byte	$e7
	.byte	$e8
	.byte	$e9
	.byte	$ea
	.byte	$eb
	.byte	$ec
	.byte	$ed
	.byte	$ee
	.byte	$00
	.byte	$01
	.byte	$af
	.byte	$32
	.byte	$30
	.byte	$32
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$6f
	.byte	$75
	.byte	$67
	.byte	$00
	.byte	$46
	.byte	$72
	.byte	$61
	.byte	$6b
	.byte	$65
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$fe
	.byte	$00
	.byte	$01
	.byte	$46
	.byte	$00
	.byte	$01
	.byte	$00
_level_1_coins:
	.byte	$90
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$50
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$70
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$02
	.byte	$70
	.byte	$00
	.byte	$50
	.byte	$03
	.byte	$a0
	.byte	$00
	.byte	$50
	.byte	$03
	.byte	$d0
	.byte	$00
	.byte	$60
	.byte	$04
	.byte	$f0
	.byte	$00
	.byte	$60
	.byte	$05
	.byte	$20
	.byte	$00
	.byte	$30
	.byte	$06
	.byte	$c0
	.byte	$00
	.byte	$30
	.byte	$06
	.byte	$e0
	.byte	$00
	.byte	$30
	.byte	$07
	.byte	$80
	.byte	$00
	.byte	$b0
	.byte	$07
	.byte	$c0
	.byte	$01
	.byte	$ff
_level_2_coins:
	.byte	$a0
	.byte	$01
	.byte	$20
	.byte	$00
	.byte	$a0
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$60
	.byte	$02
	.byte	$70
	.byte	$00
	.byte	$30
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$30
	.byte	$03
	.byte	$70
	.byte	$00
	.byte	$c0
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$c0
	.byte	$05
	.byte	$50
	.byte	$00
	.byte	$40
	.byte	$06
	.byte	$90
	.byte	$00
	.byte	$40
	.byte	$06
	.byte	$d0
	.byte	$00
	.byte	$40
	.byte	$07
	.byte	$40
	.byte	$00
	.byte	$a0
	.byte	$07
	.byte	$c0
	.byte	$01
	.byte	$ff
_level_3_coins:
	.byte	$80
	.byte	$00
	.byte	$80
	.byte	$00
	.byte	$70
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$80
	.byte	$01
	.byte	$d0
	.byte	$00
	.byte	$80
	.byte	$02
	.byte	$40
	.byte	$00
	.byte	$80
	.byte	$02
	.byte	$80
	.byte	$00
	.byte	$80
	.byte	$02
	.byte	$c0
	.byte	$00
	.byte	$80
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$50
	.byte	$07
	.byte	$25
	.byte	$00
	.byte	$50
	.byte	$07
	.byte	$80
	.byte	$01
	.byte	$b0
	.byte	$07
	.byte	$d0
	.byte	$00
	.byte	$ff
_Coins_list:
	.addr	_level_1_coins
	.addr	_level_2_coins
	.addr	_level_3_coins
_level_1_enemies:
	.byte	$c0
	.byte	$00
	.byte	$c0
	.byte	$00
	.byte	$c0
	.byte	$01
	.byte	$e0
	.byte	$01
	.byte	$c0
	.byte	$02
	.byte	$30
	.byte	$01
	.byte	$c0
	.byte	$02
	.byte	$90
	.byte	$00
	.byte	$b0
	.byte	$03
	.byte	$20
	.byte	$01
	.byte	$c0
	.byte	$03
	.byte	$b0
	.byte	$00
	.byte	$80
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$c0
	.byte	$05
	.byte	$90
	.byte	$00
	.byte	$c0
	.byte	$06
	.byte	$70
	.byte	$00
	.byte	$ff
_level_2_enemies:
	.byte	$c0
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$c0
	.byte	$01
	.byte	$d0
	.byte	$00
	.byte	$40
	.byte	$03
	.byte	$40
	.byte	$01
	.byte	$c0
	.byte	$04
	.byte	$30
	.byte	$01
	.byte	$c0
	.byte	$04
	.byte	$80
	.byte	$01
	.byte	$c0
	.byte	$06
	.byte	$20
	.byte	$00
	.byte	$c0
	.byte	$07
	.byte	$20
	.byte	$01
	.byte	$c0
	.byte	$07
	.byte	$60
	.byte	$01
	.byte	$ff
_level_3_enemies:
	.byte	$c0
	.byte	$00
	.byte	$c0
	.byte	$01
	.byte	$c0
	.byte	$00
	.byte	$f0
	.byte	$01
	.byte	$c0
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$c0
	.byte	$01
	.byte	$d0
	.byte	$00
	.byte	$c0
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$c0
	.byte	$02
	.byte	$80
	.byte	$01
	.byte	$c0
	.byte	$02
	.byte	$c0
	.byte	$01
	.byte	$b0
	.byte	$03
	.byte	$10
	.byte	$01
	.byte	$b0
	.byte	$04
	.byte	$60
	.byte	$00
	.byte	$90
	.byte	$05
	.byte	$40
	.byte	$01
	.byte	$90
	.byte	$06
	.byte	$50
	.byte	$01
	.byte	$a0
	.byte	$06
	.byte	$c0
	.byte	$01
	.byte	$c0
	.byte	$07
	.byte	$e0
	.byte	$00
	.byte	$ff
_Enemy_list:
	.addr	_level_1_enemies
	.addr	_level_2_enemies
	.addr	_level_3_enemies
_metatiles1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0b
	.byte	$0b
	.byte	$0b
	.byte	$0b
	.byte	$03
	.byte	$0d
	.byte	$0e
	.byte	$1d
	.byte	$1e
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$06
	.byte	$06
	.byte	$16
	.byte	$16
	.byte	$01
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$01
	.byte	$1b
	.byte	$01
	.byte	$1b
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$1c
	.byte	$01
	.byte	$1c
	.byte	$02
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$19
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$19
	.byte	$19
	.byte	$02
	.byte	$01
	.byte	$0a
	.byte	$19
	.byte	$1a
	.byte	$02
_is_solid:
	.byte	$00
	.byte	$80
	.byte	$c0
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_Level1_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$0a
	.byte	$0a
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level1_1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level1_2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$0a
	.byte	$0a
	.byte	$0b
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level1_3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$0a
	.byte	$0a
	.byte	$0b
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0a
	.byte	$0a
	.byte	$0a
	.byte	$0a
	.byte	$0a
	.byte	$0a
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level1_4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0a
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level1_5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0a
	.byte	$0a
	.byte	$0a
	.byte	$0b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level1_6:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$0a
	.byte	$0a
	.byte	$0a
	.byte	$0a
	.byte	$0b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level1_7:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level1_list:
	.addr	_Level1_0
	.addr	_Level1_1
	.addr	_Level1_2
	.addr	_Level1_3
	.addr	_Level1_4
	.addr	_Level1_5
	.addr	_Level1_6
	.addr	_Level1_7
_Level2_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level2_1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level2_2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level2_3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$0b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level2_4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level2_5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level2_6:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level2_7:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level2_list:
	.addr	_Level2_0
	.addr	_Level2_1
	.addr	_Level2_2
	.addr	_Level2_3
	.addr	_Level2_4
	.addr	_Level2_5
	.addr	_Level2_6
	.addr	_Level2_7
_Level3_0:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$0a
	.byte	$0a
	.byte	$0a
	.byte	$0b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level3_1:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0a
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level3_2:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level3_3:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level3_4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level3_5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level3_6:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level3_7:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level3_list:
	.addr	_Level3_0
	.addr	_Level3_1
	.addr	_Level3_2
	.addr	_Level3_3
	.addr	_Level3_4
	.addr	_Level3_5
	.addr	_Level3_6
	.addr	_Level3_7
_Levels_list:
	.addr	_Level1_0
	.addr	_Level1_1
	.addr	_Level1_2
	.addr	_Level1_3
	.addr	_Level1_4
	.addr	_Level1_5
	.addr	_Level1_6
	.addr	_Level1_7
	.addr	_Level2_0
	.addr	_Level2_1
	.addr	_Level2_2
	.addr	_Level2_3
	.addr	_Level2_4
	.addr	_Level2_5
	.addr	_Level2_6
	.addr	_Level2_7
	.addr	_Level3_0
	.addr	_Level3_1
	.addr	_Level3_2
	.addr	_Level3_3
	.addr	_Level3_4
	.addr	_Level3_5
	.addr	_Level3_6
	.addr	_Level3_7
_Level_offsets:
	.byte	$00
	.byte	$08
	.byte	$10

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_direction:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_nt:
	.res	1,$00
_index:
	.res	1,$00
_index2:
	.res	1,$00
_room:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_scroll_count:
	.res	1,$00
_pseudo_scroll_x:
	.res	2,$00
_L_R_switch:
	.res	1,$00
_old_x:
	.res	2,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_song:
	.res	1,$00
_game_mode:
	.res	1,$00
_coins:
	.res	1,$00
_lives:
	.res	1,$00
_pointer:
	.res	2,$00
_level:
	.res	1,$00
_offset:
	.res	1,$00
_level_up:
	.res	1,$00
_bright:
	.res	1,$00
_bright_count:
	.res	1,$00
_death:
	.res	1,$00
_timer:
	.res	1,$00
_enemy_frames:
	.res	1,$00
_map_loaded:
	.res	1,$00
_short_jump_count:
	.res	1,$00
_temp_room:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00
_c_map2:
	.res	240,$00
_Generic:
	.res	4,$00
_Generic2:
	.res	4,$00
_BoxGuy1:
	.res	8,$00
_coin_x:
	.res	16,$00
_coin_y:
	.res	16,$00
_coin_active:
	.res	16,$00
_coin_room:
	.res	16,$00
_coin_actual_x:
	.res	16,$00
_coin_type:
	.res	16,$00
_enemy_x:
	.res	16,$00
_enemy_y:
	.res	16,$00
_enemy_active:
	.res	16,$00
_enemy_room:
	.res	16,$00
_enemy_actual_x:
	.res	16,$00
_enemy_type:
	.res	16,$00
_enemy_anim:
	.res	32,$00

; ---------------------------------------------------------------
; void __near__ load_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_title: near

.segment	"CODE"

;
; pal_bg(palette_title);
;
	lda     #<(_palette_title)
	ldx     #>(_palette_title)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title);
;
	lda     #<(_title)
	ldx     #>(_title)
	jsr     _vram_unrle
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; offset = Level_offsets[level];
;
	ldy     _level
	lda     _Level_offsets,y
	sta     _offset
;
; set_data_pointer(Levels_list[offset]);
;
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L0019
	inx
	clc
L0019:	adc     #<(_Levels_list)
	sta     ptr1
	txa
	adc     #>(_Levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles1);
;
	lda     #<(_metatiles1)
	ldx     #>(_metatiles1)
	jsr     _set_mt_pointer
;
; for(y=0; ;y+=0x20){ 
;
	lda     #$00
L0017:	sta     _y
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L0016:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L001C
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L0016
;
; if (y == 0xe0) break;
;
L001C:	lda     _y
	cmp     #$E0
	beq     L001D
;
; for(y=0; ;y+=0x20){ 
;
	lda     #$20
	clc
	adc     _y
	jmp     L0017
;
; ++offset;
;
L001D:	inc     _offset
;
; set_data_pointer(Levels_list[offset]);
;
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L001A
	inx
	clc
L001A:	adc     #<(_Levels_list)
	sta     ptr1
	txa
	adc     #>(_Levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; for(y=0; ;y+=0x20){ 
;
	lda     #$00
L0018:	sta     _y
;
; x = 0;
;
	lda     #$00
	sta     _x
;
; address = get_ppu_addr(1, x, y);
;
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0);
;
	lda     _y
	and     #$F0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (y == 0xe0) break;
;
	lda     _y
	cmp     #$E0
	beq     L001E
;
; for(y=0; ;y+=0x20){ 
;
	lda     #$20
	clc
	adc     _y
	jmp     L0018
;
; --offset;
;
L001E:	dec     _offset
;
; memcpy (c_map, Levels_list[offset], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L001B
	inx
	clc
L001B:	adc     #<(_Levels_list)
	sta     ptr1
	txa
	adc     #>(_Levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; sprite_obj_init();
;
	jsr     _sprite_obj_init
;
; BoxGuy1.x = 0x4000;
;
	ldx     #$40
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; BoxGuy1.y = 0xc400;
;
	ldx     #$C4
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy1.vel_x = 0;
;
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; BoxGuy1.vel_y = 0;
;
	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; map_loaded = 0;
;
	sta     _map_loaded
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; temp_x = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; if(temp_x > 0xfc) temp_x = 1;
;
	cmp     #$FD
	bcc     L0028
	lda     #$01
	sta     _temp_x
;
; if(temp_x == 0) temp_x = 1;
;
L0028:	lda     _temp_x
	bne     L0029
	lda     #$01
	sta     _temp_x
;
; if(direction == LEFT) {
;
L0029:	lda     _direction
	bne     L0004
;
; oam_meta_spr(temp_x, high_byte(BoxGuy1.y), RoundSprL);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _BoxGuy1+3
	dey
	sta     (sp),y
	lda     #<(_RoundSprL)
	ldx     #>(_RoundSprL)
;
; else{
;
	jmp     L0025
;
; oam_meta_spr(temp_x, high_byte(BoxGuy1.y), RoundSprR);
;
L0004:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _BoxGuy1+3
	dey
	sta     (sp),y
	lda     #<(_RoundSprR)
	ldx     #>(_RoundSprR)
L0025:	jsr     _oam_meta_spr
;
; for(index = 0; index < MAX_COINS; ++index){
;
	lda     #$00
	sta     _index
L002A:	lda     _index
	cmp     #$10
	jcs     L0007
;
; temp_y = coin_y[index];
;
	ldy     _index
	lda     _coin_y,y
	sta     _temp_y
;
; if(temp_y == TURN_OFF) continue;
;
	cmp     #$FF
	beq     L002B
;
; if(!coin_active[index]) continue;
;
	ldy     _index
	lda     _coin_active,y
	beq     L002B
;
; temp_x = coin_x[index];
;
	ldy     _index
	lda     _coin_x,y
	sta     _temp_x
;
; if(temp_x > 0xf0) continue;
;
	cmp     #$F1
	bcs     L002B
;
; temp1 = get_frame_count();
;
	jsr     _get_frame_count
	sta     _temp1
;
; temp1 = (temp1 >> 2) & 7;
;
	lsr     a
	lsr     a
	and     #$07
	sta     _temp1
;
; temp1 = bounce[temp1];
;
	ldy     _temp1
	lda     _bounce,y
	sta     _temp1
;
; temp_y += temp1;
;
	clc
	adc     _temp_y
	sta     _temp_y
;
; if(temp_y < 0xf0) {
;
	cmp     #$F0
	bcs     L002B
;
; if(coin_type[index] == COIN_REG){
;
	ldy     _index
	lda     _coin_type,y
	bne     L0012
;
; oam_meta_spr(temp_x, temp_y, CoinSpr);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_CoinSpr)
	ldx     #>(_CoinSpr)
;
; else {
;
	jmp     L0026
;
; oam_meta_spr(temp_x, temp_y, BigCoinSpr);
;
L0012:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_BigCoinSpr)
	ldx     #>(_BigCoinSpr)
L0026:	jsr     _oam_meta_spr
;
; for(index = 0; index < MAX_COINS; ++index){
;
L002B:	inc     _index
	jmp     L002A
;
; offset = get_frame_count() & 3;
;
L0007:	jsr     _get_frame_count
	and     #$03
	sta     _offset
;
; offset = offset << 4; // * 16, the size of the shuffle array
;
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _offset
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
	lda     #$00
	sta     _index
L002C:	lda     _index
	cmp     #$10
	bcs     L0016
;
; index2 = shuffle_array[offset];
;
	ldy     _offset
	lda     _shuffle_array,y
	sta     _index2
;
; ++offset;
;
	inc     _offset
;
; temp_y = enemy_y[index2];
;
	ldy     _index2
	lda     _enemy_y,y
	sta     _temp_y
;
; if(temp_y == TURN_OFF) continue;
;
	cmp     #$FF
	beq     L002E
;
; if(!enemy_active[index2]) continue;
;
	ldy     _index2
	lda     _enemy_active,y
	beq     L002E
;
; temp_x = enemy_x[index2];
;
	ldy     _index2
	lda     _enemy_x,y
	sta     _temp_x
;
; if(temp_x == 0) temp_x = 1; // problems with x = 0
;
	lda     _temp_x
	bne     L002D
	lda     #$01
	sta     _temp_x
;
; if(temp_x > 0xf0) continue;
;
L002D:	lda     _temp_x
	cmp     #$F1
	bcs     L002E
;
; if(temp_y < 0xf0) {
;
	lda     _temp_y
	cmp     #$F0
	bcs     L002E
;
; oam_meta_spr(temp_x, temp_y, enemy_anim[index2]);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	ldx     #$00
	lda     _index2
	asl     a
	bcc     L0027
	inx
	clc
L0027:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L002E:	inc     _index
	jmp     L002C
;
; oam_meta_spr(0x10, 0x0f, CoinHud);
;
L0016:	jsr     decsp2
	lda     #$10
	ldy     #$01
	sta     (sp),y
	lda     #$0F
	dey
	sta     (sp),y
	lda     #<(_CoinHud)
	ldx     #>(_CoinHud)
	jsr     _oam_meta_spr
;
; temp1 = (coins / 10) + 0xf0;
;
	lda     _coins
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$F0
	sta     _temp1
;
; temp2 = (coins % 10) + 0xf0;
;
	lda     _coins
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$F0
	sta     _temp2
;
; oam_spr(0x20, 0x17, temp1, 1);
;
	jsr     decsp3
	lda     #$20
	ldy     #$02
	sta     (sp),y
	lda     #$17
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(0x28, 0x17, temp2, 1);
;
	jsr     decsp3
	lda     #$28
	ldy     #$02
	sta     (sp),y
	lda     #$17
	dey
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     #$01
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = BoxGuy1.x;
;
	lda     _BoxGuy1+1
	sta     _old_x+1
	lda     _BoxGuy1
	sta     _old_x
;
; if(pad1 & PAD_LEFT){
;
	lda     _pad1
	and     #$02
	beq     L004F
;
; direction = LEFT;
;
	lda     #$00
	sta     _direction
;
; if(BoxGuy1.vel_x >= DECEL){
;
	lda     _BoxGuy1+4
	cmp     #$32
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L0004
	eor     #$80
L0004:	bpl     L0003
;
; BoxGuy1.vel_x -= DECEL;
;
	lda     _BoxGuy1+4
	sec
	sbc     #$32
	sta     _BoxGuy1+4
	jcs     L0020
	dec     _BoxGuy1+4+1
;
; else if(BoxGuy1.vel_x > 0){
;
	jmp     L0020
L0003:	lda     _BoxGuy1+4
	cmp     #$01
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L0008
	eor     #$80
L0008:	bpl     L0007
;
; BoxGuy1.vel_x = 0;
;
	ldx     #$00
	txa
;
; else {
;
	jmp     L0051
;
; BoxGuy1.vel_x -= ACCEL;
;
L0007:	lda     _BoxGuy1+4
	sec
	sbc     #$1E
	sta     _BoxGuy1+4
	bcs     L000A
	dec     _BoxGuy1+4+1
;
; if(BoxGuy1.vel_x < -MAX_SPEED) BoxGuy1.vel_x = -MAX_SPEED;
;
L000A:	lda     _BoxGuy1+4
	cmp     #$C0
	lda     _BoxGuy1+4+1
	sbc     #$FD
	bvc     L000C
	eor     #$80
L000C:	jpl     L0020
	ldx     #$FD
	lda     #$C0
;
; else if (pad1 & PAD_RIGHT){
;
	jmp     L0051
L004F:	lda     _pad1
	and     #$01
	beq     L000E
;
; direction = RIGHT;
;
	lda     #$01
	sta     _direction
;
; if(BoxGuy1.vel_x <= DECEL){
;
	lda     _BoxGuy1+4
	cmp     #$33
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvc     L0010
	eor     #$80
L0010:	bpl     L000F
;
; BoxGuy1.vel_x += DECEL;
;
	lda     #$32
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	jcc     L0020
	inc     _BoxGuy1+4+1
;
; else if(BoxGuy1.vel_x < 0){
;
	jmp     L0020
L000F:	ldx     _BoxGuy1+4+1
	cpx     #$80
	bcc     L0013
;
; BoxGuy1.vel_x = 0;
;
	ldx     #$00
	txa
;
; else {
;
	jmp     L0051
;
; BoxGuy1.vel_x += ACCEL;
;
L0013:	lda     #$1E
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	bcc     L0015
	inc     _BoxGuy1+4+1
;
; if(BoxGuy1.vel_x >= MAX_SPEED) BoxGuy1.vel_x = MAX_SPEED;
;
L0015:	lda     _BoxGuy1+4
	cmp     #$40
	lda     _BoxGuy1+4+1
	sbc     #$02
	bvs     L0017
	eor     #$80
L0017:	bpl     L0020
	ldx     #$02
	lda     #$40
;
; else { // nothing pressed
;
	jmp     L0051
;
; if(BoxGuy1.vel_x >= ACCEL) BoxGuy1.vel_x -= ACCEL;
;
L000E:	lda     _BoxGuy1+4
	cmp     #$1E
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L001A
	eor     #$80
L001A:	bpl     L0019
	lda     _BoxGuy1+4
	sec
	sbc     #$1E
	sta     _BoxGuy1+4
	bcs     L0020
	dec     _BoxGuy1+4+1
;
; else if(BoxGuy1.vel_x < -ACCEL) BoxGuy1.vel_x += ACCEL;
;
	jmp     L0020
L0019:	lda     _BoxGuy1+4
	cmp     #$E2
	lda     _BoxGuy1+4+1
	sbc     #$FF
	bvc     L001E
	eor     #$80
L001E:	asl     a
	lda     #$00
	tax
	bcc     L0051
	lda     #$1E
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	bcc     L0020
	inc     _BoxGuy1+4+1
;
; else BoxGuy1.vel_x = 0;
;
	jmp     L0020
L0051:	sta     _BoxGuy1+4
	stx     _BoxGuy1+4+1
;
; BoxGuy1.x += BoxGuy1.vel_x;
;
L0020:	lda     _BoxGuy1+4
	clc
	adc     _BoxGuy1
	sta     _BoxGuy1
	lda     _BoxGuy1+4+1
	adc     _BoxGuy1+1
	sta     _BoxGuy1+1
;
; if(BoxGuy1.x > 0xf000) { // too far, don't wrap around
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L0054
;
; if(old_x >= 0x8000){
;
	lda     _old_x
	cmp     #$00
	lda     _old_x+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L0053
;
; BoxGuy1.x = 0xf000; // max right
;
	ldx     #$F0
;
; BoxGuy1.x = 0x0000; // max left
;
L0053:	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; Generic.x = high_byte(BoxGuy1.x); // this is much faster than passing a pointer to BoxGuy1
;
L0054:	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$0D
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	lda     #$0B
	sta     _Generic+3
;
; if(BoxGuy1.vel_x < 0){
;
	ldx     _BoxGuy1+4+1
	cpx     #$80
	bcc     L0024
;
; if(bg_coll_L() ){ // check collision left
;
	jsr     _bg_coll_L
	tax
	beq     L002B
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_L;
;
	lda     _BoxGuy1+1
	sec
	sbc     _eject_L
	sta     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; if(BoxGuy1.x > 0xf000) {
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L002B
;
; BoxGuy1.x = 0xf000;
;
	ldx     #$F0
;
; else if(BoxGuy1.vel_x > 0){
;
	jmp     L005C
L0024:	lda     _BoxGuy1+4
	cmp     #$01
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L0029
	eor     #$80
L0029:	bpl     L002B
;
; if(bg_coll_R() ){ // check collision right
;
	jsr     _bg_coll_R
	tax
	beq     L002B
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_R;
;
	lda     _BoxGuy1+1
	sec
	sbc     _eject_R
	sta     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; if(BoxGuy1.x > 0xf000) {
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L002B
;
; BoxGuy1.x = 0x0000;
;
	ldx     #$00
L005C:	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; if(BoxGuy1.vel_y < 0x300){
;
L002B:	lda     _BoxGuy1+6
	cmp     #$00
	lda     _BoxGuy1+6+1
	sbc     #$03
	bvc     L002D
	eor     #$80
L002D:	bpl     L002C
;
; BoxGuy1.vel_y += GRAVITY;
;
	lda     #$4C
	clc
	adc     _BoxGuy1+6
	sta     _BoxGuy1+6
	bcc     L002F
	inc     _BoxGuy1+6+1
;
; else{
;
	jmp     L002F
;
; BoxGuy1.vel_y = 0x300; // consistent
;
L002C:	ldx     #$03
	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; BoxGuy1.y += BoxGuy1.vel_y;
;
L002F:	lda     _BoxGuy1+6
	clc
	adc     _BoxGuy1+2
	sta     _BoxGuy1+2
	lda     _BoxGuy1+6+1
	adc     _BoxGuy1+2+1
	sta     _BoxGuy1+2+1
;
; Generic.x = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; if(BoxGuy1.vel_y > 0){
;
	lda     _BoxGuy1+6
	cmp     #$01
	lda     _BoxGuy1+6+1
	sbc     #$00
	bvs     L0031
	eor     #$80
L0031:	bpl     L0030
;
; if(bg_coll_D() ){ // check collision below
;
	jsr     _bg_coll_D
	tax
	beq     L0055
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_D;
;
	lda     _BoxGuy1+3
	sec
	sbc     _eject_D
	sta     _BoxGuy1+3
;
; BoxGuy1.y &= 0xff00;
;
	ldx     _BoxGuy1+2+1
	lda     #$00
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; if(BoxGuy1.vel_y > 0) {
;
	lda     _BoxGuy1+6
	cmp     #$01
	lda     _BoxGuy1+6+1
	sbc     #$00
	bvs     L0034
	eor     #$80
L0034:	bpl     L0055
;
; else if(BoxGuy1.vel_y < 0){
;
	jmp     L005D
L0030:	ldx     _BoxGuy1+6+1
	cpx     #$80
	bcc     L0055
;
; if(bg_coll_U() ){ // check collision above
;
	jsr     _bg_coll_U
	tax
	beq     L0055
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_U;
;
	lda     _BoxGuy1+3
	sec
	sbc     _eject_U
	sta     _BoxGuy1+3
;
; BoxGuy1.vel_y = 0;
;
L005D:	lda     #$00
	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; Generic.y = high_byte(BoxGuy1.y); // the rest should be the same
;
L0055:	lda     _BoxGuy1+3
	sta     _Generic+1
;
; if(pad1_new & PAD_A) {
;
	lda     _pad1_new
	and     #$80
	beq     L0039
;
; if(bg_coll_D2() ) {
;
	jsr     _bg_coll_D2
	tax
	beq     L0039
;
; BoxGuy1.vel_y = JUMP_VEL; // JUMP
;
	ldx     #$FA
	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; sfx_play(SFX_JUMP, 0);
;
	jsr     pusha
	jsr     _sfx_play
;
; if(short_jump_count){
;
L0039:	lda     _short_jump_count
	beq     L003B
;
; ++short_jump_count;
;
	inc     _short_jump_count
;
; if(short_jump_count > 30) short_jump_count = 0;
;
	lda     _short_jump_count
	cmp     #$1F
	bcc     L003B
	lda     #$00
	sta     _short_jump_count
;
; if((short_jump_count) && ((pad1 & PAD_A) == 0) && (BoxGuy1.vel_y < -0x200)){
;
L003B:	lda     _short_jump_count
	beq     L003C
	lda     _pad1
	and     #$80
	bne     L003C
	lda     _BoxGuy1+6
	cmp     #$00
	lda     _BoxGuy1+6+1
	sbc     #$FE
	bvc     L003F
	eor     #$80
L003F:	bpl     L003C
;
; BoxGuy1.vel_y = -0x200;
;
	ldx     #$FE
	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; short_jump_count = 0;
;
	sta     _short_jump_count
;
; if((scroll_x & 0xff) < 4){
;
L003C:	lda     _scroll_x
	cmp     #$04
	bcs     L0058
;
; if(!map_loaded){
;
	lda     _map_loaded
	bne     L0045
;
; new_cmap();
;
	jsr     _new_cmap
;
; map_loaded = 1; // only do once
;
	lda     #$01
;
; else{
;
	jmp     L004E
;
; map_loaded = 0;
;
L0058:	lda     #$00
L004E:	sta     _map_loaded
;
; temp5 = BoxGuy1.x;
;
L0045:	lda     _BoxGuy1+1
	sta     _temp5+1
	lda     _BoxGuy1
	sta     _temp5
;
; if (BoxGuy1.x > MAX_RIGHT){
;
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$90
	bcc     L0046
;
; temp1 = (BoxGuy1.x - MAX_RIGHT) >> 8;
;
	lda     _BoxGuy1+1
	sec
	sbc     #$90
	sta     _temp1
;
; if (temp1 > 3) temp1 = 3; // max scroll change
;
	cmp     #$04
	bcc     L0059
	lda     #$03
	sta     _temp1
;
; scroll_x += temp1;
;
L0059:	lda     _temp1
	clc
	adc     _scroll_x
	sta     _scroll_x
	lda     #$00
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - temp1;
;
	lda     _BoxGuy1+1
	sec
	sbc     _temp1
	sta     _BoxGuy1+1
;
; if(scroll_x >= MAX_SCROLL) {
;
L0046:	lda     _scroll_x
	cmp     #$FF
	lda     _scroll_x+1
	sbc     #$06
	bcc     L0049
;
; scroll_x = MAX_SCROLL; // stop scrolling right, end of level
;
	ldx     #$06
	lda     #$FF
	sta     _scroll_x
	stx     _scroll_x+1
;
; BoxGuy1.x = temp5; // but allow the x position to go all the way right
;
	lda     _temp5+1
	sta     _BoxGuy1+1
	lda     _temp5
	sta     _BoxGuy1
;
; if(high_byte(BoxGuy1.x) >= 0xf1) {
;
	lda     _BoxGuy1+1
	cmp     #$F1
	bcc     L0049
;
; BoxGuy1.x = 0xf100;
;
	ldx     #$F1
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; } 
;
L0049:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_R: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x + 0x120;
;
	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     #$20
	bcc     L0002
	inx
L0002:	inx
	sta     _pseudo_scroll_x
	stx     _pseudo_scroll_x+1
;
; temp1 = pseudo_scroll_x >> 8;
;
	lda     _pseudo_scroll_x+1
	sta     _temp1
;
; offset = Level_offsets[level];
;
	ldy     _level
	lda     _Level_offsets,y
	sta     _offset
;
; offset += temp1;
;
	lda     _temp1
	clc
	adc     _offset
	sta     _offset
;
; set_data_pointer(Levels_list[offset]);
;
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L0013
	inx
	clc
L0013:	adc     #<(_Levels_list)
	sta     ptr1
	txa
	adc     #>(_Levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = temp1 & 1;
;
	lda     _temp1
	and     #$01
	sta     _nt
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x
	sta     _x
;
; switch(scroll_count){
;
	lda     _scroll_count
;
; }
;
	beq     L0006
	cmp     #$01
	beq     L0008
	cmp     #$02
	jeq     L000B
	jmp     L000E
;
; address = get_ppu_addr(nt, x, 0);
;
L0006:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x20);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x20 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
;
; break;
;
	jmp     L0018
;
; address = get_ppu_addr(nt, x, 0x40);
;
L0008:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x40 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$40
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x60 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$60
;
; break;
;
	jmp     L0018
;
; address = get_ppu_addr(nt, x, 0x80);
;
L000B:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x80 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xa0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$A0
;
; break;
;
	jmp     L0018
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L000E:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xc0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$C0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$E0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xe0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$E0
L0018:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; //mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_cmap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_cmap: near

.segment	"CODE"

;
; room = ((scroll_x >> 8) +1); //high byte = room, one to the right
;
	lda     _scroll_x+1
	clc
	adc     #$01
	sta     _room
;
; offset = Level_offsets[level];
;
	ldy     _level
	lda     _Level_offsets,y
	sta     _offset
;
; offset += room;
;
	lda     _room
	clc
	adc     _offset
	sta     _offset
;
; map = room & 1; //even or odd?
;
	lda     _room
	and     #$01
	sta     _map
;
; if(!map){
;
	lda     _map
	bne     L0004
;
; memcpy (c_map, Levels_list[offset], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
;
; else{
;
	jmp     L001D
;
; memcpy (c_map2, Levels_list[offset], 240);
;
L0004:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
L001D:	jsr     pushax
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L000A
	inx
	clc
L000A:	adc     #<(_Levels_list)
	sta     ptr1
	txa
	adc     #>(_Levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; char __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; if(temp_y >= 0xf0) return 0;
;
	lda     _temp_y
	cmp     #$F0
	ldx     #$00
	bcc     L000A
	txa
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0);
;
L000A:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; map = temp_room&1; // high byte
;
	lda     _temp_room
	and     #$01
	sta     _map
;
; if(!map){
;
	lda     _map
	bne     L0003
;
; collision = c_map[coordinates];
;
	ldy     _coordinates
	lda     _c_map,y
;
; else{
;
	jmp     L0009
;
; collision = c_map2[coordinates];
;
L0003:	ldy     _coordinates
	lda     _c_map2,y
L0009:	sta     _collision
;
; return is_solid[collision];
;
	ldy     _collision
	lda     _is_solid,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; char __near__ get_position (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_position: near

.segment	"CODE"

;
; temp5 -= scroll_x;
;
	lda     _scroll_x
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     _scroll_x+1
	eor     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; temp_x = temp5 & 0xff;
;
	lda     _temp5
	ldx     #$00
	sta     _temp_x
;
; if(high_byte(temp5)) return 0;
;
	lda     _temp5+1
	beq     L0003
	txa
	rts
;
; return 1;
;
L0003:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_moves (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_moves: near

.segment	"CODE"

;
; if(enemy_type[index] == ENEMY_CHASE){
;
	ldy     _index
	lda     _enemy_type,y
	jne     L0002
;
; Generic.x = enemy_x[index];
;
	ldy     _index
	lda     _enemy_x,y
	sta     _Generic
;
; Generic.y = enemy_y[index] + 6; // mid point
;
	ldy     _index
	lda     _enemy_y,y
	clc
	adc     #$06
	sta     _Generic+1
;
; Generic.width = 13;
;
	lda     #$0D
	sta     _Generic+2
;
; Generic.height = 15;
;
	lda     #$0F
	sta     _Generic+3
;
; enemy_anim[index] = EnemyChaseSpr;
;
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0035
	inx
	clc
L0035:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_EnemyChaseSpr)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_EnemyChaseSpr)
	sta     (ptr1),y
;
; if(enemy_frames & 1) return; // half speed
;
	lda     _enemy_frames
	and     #$01
	beq     L003F
;
; }
;
	rts
;
; if(enemy_x[index] > Generic2.x){
;
L003F:	ldy     _index
	lda     _enemy_x,y
	cmp     _Generic2
	bcc     L0008
	beq     L0008
;
; Generic.x -= 1; // test going left
;
	dec     _Generic
;
; bg_collision_fast();
;
	jsr     _bg_collision_fast
;
; if(collision_L) return;
;
	lda     _collision_L
	beq     L0040
;
; }
;
	rts
;
; if(enemy_actual_x[index] == 0) --enemy_room[index];
;
L0040:	ldy     _index
	lda     _enemy_actual_x,y
	bne     L000B
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L000D
	inx
L000D:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; --enemy_actual_x[index];
;
L000B:	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L000E
	inx
L000E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; else if(enemy_x[index] < Generic2.x){
;
	rts
L0008:	ldy     _index
	lda     _enemy_x,y
	cmp     _Generic2
	bcc     L0041
;
; }
;
	rts
;
; Generic.x += 1; // test going right
;
L0041:	inc     _Generic
;
; bg_collision_fast();
;
	jsr     _bg_collision_fast
;
; if(collision_R) return;
;
	lda     _collision_R
	beq     L0042
;
; }
;
	rts
;
; ++enemy_actual_x[index];
;
L0042:	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L0013
	inx
L0013:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if(enemy_actual_x[index] == 0) ++enemy_room[index];
;
	ldy     _index
	lda     _enemy_actual_x,y
	beq     L0043
;
; }
;
	rts
;
; if(enemy_actual_x[index] == 0) ++enemy_room[index];
;
L0043:	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L0016
	inx
L0016:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; else if(enemy_type[index] == ENEMY_BOUNCE){
;
	rts
L0002:	ldy     _index
	lda     _enemy_type,y
	cmp     #$01
	beq     L0044
;
; }
;
	rts
;
; temp1 = enemy_frames + (index << 3);
;
L0044:	lda     _index
	asl     a
	asl     a
	asl     a
	clc
	adc     _enemy_frames
	sta     _temp1
;
; temp1 &= 0x3f;
;
	and     #$3F
	sta     _temp1
;
; if(temp1 < 16){ // stand still
;
	cmp     #$10
	bcs     L003B
;
; enemy_anim[index] = EnemyBounceSpr;
;
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0036
	inx
	clc
L0036:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_EnemyBounceSpr)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_EnemyBounceSpr)
	sta     (ptr1),y
;
; else if(temp1 < 22){
;
	rts
L003B:	lda     _temp1
	cmp     #$16
	bcs     L003C
;
; --enemy_y[index]; // jump
;
	lda     #<(_enemy_y)
	ldx     #>(_enemy_y)
	clc
	adc     _index
	bcc     L001D
	inx
L001D:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; --enemy_y[index]; // jump faster
;
	lda     #<(_enemy_y)
	ldx     #>(_enemy_y)
	clc
	adc     _index
	bcc     L001E
	inx
L001E:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; enemy_anim[index] = EnemyBounceSpr2;
;
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0037
	inx
	clc
L0037:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_EnemyBounceSpr2)
	sta     (ptr1),y
	iny
	lda     #>(_EnemyBounceSpr2)
	sta     (ptr1),y
;
; else if(temp1 < 42){
;
	rts
L003C:	lda     _temp1
	cmp     #$2A
	bcs     L003D
;
; --enemy_y[index]; // jump
;
	lda     #<(_enemy_y)
	ldx     #>(_enemy_y)
	clc
	adc     _index
	bcc     L0021
	inx
L0021:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; enemy_anim[index] = EnemyBounceSpr2;
;
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0038
	inx
	clc
L0038:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_EnemyBounceSpr2)
	sta     (ptr1),y
	iny
	lda     #>(_EnemyBounceSpr2)
	sta     (ptr1),y
;
; else if(temp1 < 44){ // use short anim. 2 frames
;
	rts
L003D:	lda     _temp1
	cmp     #$2C
	bcs     L0023
;
; --enemy_y[index]; // jump
;
	lda     #<(_enemy_y)
	ldx     #>(_enemy_y)
	clc
	adc     _index
	bcc     L0024
	inx
L0024:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; enemy_anim[index] = EnemyBounceSpr;
;
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0039
	inx
	clc
L0039:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_EnemyBounceSpr)
	sta     (ptr1),y
	iny
	lda     #>(_EnemyBounceSpr)
	sta     (ptr1),y
;
; else {
;
	rts
;
; ++enemy_y[index]; // fall
;
L0023:	lda     #<(_enemy_y)
	ldx     #>(_enemy_y)
	clc
	adc     _index
	bcc     L0026
	inx
L0026:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if(temp1 < 62){
;
	ldx     #$00
	lda     _temp1
	cmp     #$3E
	bcs     L003E
;
; ++enemy_y[index]; // fall faster
;
	lda     #<(_enemy_y)
	ldx     #>(_enemy_y)
	clc
	adc     _index
	bcc     L0028
	inx
L0028:	sta     ptr1
	stx     ptr1+1
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; enemy_anim[index] = EnemyBounceSpr2;
;
	ldx     #$00
L003E:	lda     _index
	asl     a
	bcc     L003A
	inx
	clc
L003A:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_EnemyBounceSpr2)
	sta     (ptr1),y
	iny
	lda     #>(_EnemyBounceSpr2)
	sta     (ptr1),y
;
; temp1 = enemy_y[index];
;
	ldy     _index
	lda     _enemy_y,y
	sta     _temp1
;
; Generic.x = enemy_x[index];
;
	ldy     _index
	lda     _enemy_x,y
	sta     _Generic
;
; Generic.y = enemy_y[index];
;
	ldy     _index
	lda     _enemy_y,y
	sta     _Generic+1
;
; Generic.width = 15;
;
	lda     #$0F
	sta     _Generic+2
;
; Generic.height = 14;
;
	lda     #$0E
	sta     _Generic+3
;
; if(bg_coll_D()){
;
	jsr     _bg_coll_D
	tax
	beq     L002C
;
; enemy_y[index] -= eject_D;
;
	lda     #<(_enemy_y)
	ldx     #>(_enemy_y)
	clc
	adc     _index
	bcc     L002D
	inx
L002D:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     _eject_D
	sta     (sreg),y
;
; }
;
L002C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_collisions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_collisions: near

.segment	"CODE"

;
; Generic.x = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$0D
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	lda     #$0B
	sta     _Generic+3
;
; for(index = 0; index < MAX_COINS; ++index){
;
	lda     #$00
	sta     _index
L0020:	lda     _index
	cmp     #$10
	bcs     L0023
;
; if(coin_active[index]){
;
	ldy     _index
	lda     _coin_active,y
	beq     L0022
;
; if(coin_type[index] == COIN_REG){
;
	ldy     _index
	lda     _coin_type,y
	bne     L0021
;
; Generic2.width = COIN_WIDTH;
;
	lda     #$07
	sta     _Generic2+2
;
; Generic2.height = COIN_HEIGHT;
;
	lda     #$0B
;
; else{
;
	jmp     L001F
;
; Generic2.width = BIG_COIN;
;
L0021:	lda     #$0D
	sta     _Generic2+2
;
; Generic2.height = BIG_COIN;
;
L001F:	sta     _Generic2+3
;
; Generic2.x = coin_x[index];
;
	ldy     _index
	lda     _coin_x,y
	sta     _Generic2
;
; Generic2.y = coin_y[index];
;
	ldy     _index
	lda     _coin_y,y
	sta     _Generic2+1
;
; if(check_collision(&Generic, &Generic2)){
;
	lda     #<(_Generic)
	ldx     #>(_Generic)
	jsr     pushax
	lda     #<(_Generic2)
	ldx     #>(_Generic2)
	jsr     _check_collision
	tax
	beq     L0022
;
; coin_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _coin_y,y
;
; sfx_play(SFX_DING, 0);
;
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; ++coins;
;
	inc     _coins
;
; if(coin_type[index] == COIN_END) ++level_up;
;
	ldy     _index
	lda     _coin_type,y
	cmp     #$01
	bne     L0022
	inc     _level_up
;
; for(index = 0; index < MAX_COINS; ++index){
;
L0022:	inc     _index
	jmp     L0020
;
; Generic2.width = ENEMY_WIDTH;
;
L0023:	lda     #$0D
	sta     _Generic2+2
;
; Generic2.height = ENEMY_HEIGHT;
;
	sta     _Generic2+3
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
	lda     #$00
	sta     _index
L0024:	lda     _index
	cmp     #$10
	bcs     L0012
;
; if(enemy_active[index]){
;
	ldy     _index
	lda     _enemy_active,y
	beq     L0025
;
; Generic2.x = enemy_x[index];
;
	ldy     _index
	lda     _enemy_x,y
	sta     _Generic2
;
; Generic2.y = enemy_y[index];
;
	ldy     _index
	lda     _enemy_y,y
	sta     _Generic2+1
;
; if(check_collision(&Generic, &Generic2)){
;
	lda     #<(_Generic)
	ldx     #>(_Generic)
	jsr     pushax
	lda     #<(_Generic2)
	ldx     #>(_Generic2)
	jsr     _check_collision
	tax
	beq     L0025
;
; enemy_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _enemy_y,y
;
; enemy_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_active,y
;
; sfx_play(SFX_NOISE, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if(coins) {
;
	lda     _coins
	beq     L001C
;
; coins -= 5;
;
	sec
	sbc     #$05
	sta     _coins
;
; if(coins > 0x80) coins = 0;
;
	cmp     #$81
	bcc     L0025
	lda     #$00
	sta     _coins
;
; else { // die
;
	jmp     L0025
;
; ++death;
;
L001C:	inc     _death
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L0025:	inc     _index
	jmp     L0024
;
; }
;
L0012:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_spr_objects (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_spr_objects: near

.segment	"CODE"

;
; ++enemy_frames;
;
	inc     _enemy_frames
;
; Generic2.x = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _Generic2
;
; for(index = 0; index < MAX_COINS; ++index){
;
	lda     #$00
	sta     _index
L0019:	lda     _index
	cmp     #$10
	bcs     L001B
;
; coin_active[index] = 0; //default to zero
;
	ldy     _index
	lda     #$00
	sta     _coin_active,y
;
; if(coin_y[index] != TURN_OFF){
;
	ldy     _index
	lda     _coin_y,y
	cmp     #$FF
	beq     L001A
;
; high_byte(temp5) = coin_room[index];
;
	ldy     _index
	lda     _coin_room,y
	sta     _temp5+1
;
; low_byte(temp5) = coin_actual_x[index];
;
	ldy     _index
	lda     _coin_actual_x,y
	sta     _temp5
;
; coin_active[index] = get_position();
;
	lda     #<(_coin_active)
	ldx     #>(_coin_active)
	clc
	adc     _index
	bcc     L000B
	inx
L000B:	jsr     pushax
	jsr     _get_position
	ldy     #$00
	jsr     staspidx
;
; coin_x[index] = temp_x; // screen x coords
;
	ldy     _index
	lda     _temp_x
	sta     _coin_x,y
;
; for(index = 0; index < MAX_COINS; ++index){
;
L001A:	inc     _index
	jmp     L0019
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L001B:	lda     #$00
	sta     _index
L001C:	lda     _index
	cmp     #$10
	bcs     L000E
;
; enemy_active[index] = 0; //default to zero
;
	ldy     _index
	lda     #$00
	sta     _enemy_active,y
;
; if(enemy_y[index] != TURN_OFF){
;
	ldy     _index
	lda     _enemy_y,y
	cmp     #$FF
	beq     L001D
;
; high_byte(temp5) = enemy_room[index];
;
	ldy     _index
	lda     _enemy_room,y
	sta     _temp5+1
;
; low_byte(temp5) = enemy_actual_x[index];
;
	ldy     _index
	lda     _enemy_actual_x,y
	sta     _temp5
;
; temp1 = enemy_active[index] = get_position();
;
	lda     #<(_enemy_active)
	ldx     #>(_enemy_active)
	clc
	adc     _index
	bcc     L0016
	inx
L0016:	jsr     pushax
	jsr     _get_position
	ldy     #$00
	jsr     staspidx
	sta     _temp1
;
; if(temp1 == 0) continue;
;
	lda     _temp1
	beq     L001D
;
; enemy_x[index] = temp_x; // screen x coords
;
	ldy     _index
	lda     _temp_x
	sta     _enemy_x,y
;
; enemy_moves(); // if active, do it's moves now
;
	jsr     _enemy_moves
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L001D:	inc     _index
	jmp     L001C
;
; }
;
L000E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_obj_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_obj_init: near

.segment	"CODE"

;
; pointer = Coins_list[level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L002E
	inx
	clc
L002E:	adc     #<(_Coins_list)
	sta     ptr1
	txa
	adc     #>(_Coins_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _pointer+1
	dey
	lda     (ptr1),y
	sta     _pointer
;
; for(index = 0,index2 = 0;index < MAX_COINS; ++index){
;
	tya
	sta     _index
	sta     _index2
L0030:	lda     _index
	cmp     #$10
	jcs     L0031
;
; coin_x[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _coin_x,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; coin_y[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _coin_y,y
;
; if(temp1 == TURN_OFF) break;
;
	cmp     #$FF
	beq     L0031
;
; ++index2;
;
	inc     _index2
;
; coin_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _coin_active,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; coin_room[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _coin_room,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; coin_actual_x[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _coin_actual_x,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; coin_type[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _coin_type,y
;
; ++index2;
;
	inc     _index2
;
; for(index = 0,index2 = 0;index < MAX_COINS; ++index){
;
	inc     _index
	jmp     L0030
;
; for(++index;index < MAX_COINS; ++index){
;
L0031:	inc     _index
	ldx     #$00
	lda     _index
	cmp     #$10
	bcs     L0032
;
; coin_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _coin_y,y
;
; for(++index;index < MAX_COINS; ++index){
;
	jmp     L0031
;
; pointer = Enemy_list[level];
;
L0032:	lda     _level
	asl     a
	bcc     L002F
	inx
	clc
L002F:	adc     #<(_Enemy_list)
	sta     ptr1
	txa
	adc     #>(_Enemy_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _pointer+1
	dey
	lda     (ptr1),y
	sta     _pointer
;
; for(index = 0,index2 = 0;index < MAX_ENEMY; ++index){
;
	tya
	sta     _index
	sta     _index2
L0033:	lda     _index
	cmp     #$10
	jcs     L0034
;
; enemy_x[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_x,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_y[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_y,y
;
; if(temp1 == TURN_OFF) break;
;
	cmp     #$FF
	beq     L0034
;
; ++index2;
;
	inc     _index2
;
; enemy_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_active,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_room[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_room,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_actual_x[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_actual_x,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_type[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_type,y
;
; ++index2;
;
	inc     _index2
;
; for(index = 0,index2 = 0;index < MAX_ENEMY; ++index){
;
	inc     _index
	jmp     L0033
;
; for(++index;index < MAX_ENEMY; ++index){
;
L0034:	inc     _index
	lda     _index
	cmp     #$10
	bcs     L001E
;
; enemy_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _enemy_y,y
;
; for(++index;index < MAX_ENEMY; ++index){
;
	jmp     L0034
;
; }
;
L001E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_fast (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_fast: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; if(Generic.y >= 0xf0) return;
;
	lda     _Generic+1
	cmp     #$F0
	bcs     L0005
;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
	pla
	sta     _temp5
;
; temp_x = temp5 & 0xff; // low byte x
;
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + 6; // y middle
;
	lda     _Generic+1
	clc
	adc     #$06
	sta     _temp_y
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(bg_collision_sub() & COL_ALL){
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L0006
;
; ++collision_L;
;
	inc     _collision_L
;
; temp5 += Generic.width;
;
L0006:	lda     _Generic+2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp_x = temp5 & 0xff; // low byte x
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp_room
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(bg_collision_sub() & COL_ALL){ // find a corner in the collision map
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L0005
;
; ++collision_R;
;
	inc     _collision_R
;
; }
;
L0005:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ bg_coll_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_L: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; eject_L = temp_x | 0xf0;
;
	lda     _temp_x
	ora     #$F0
	sta     _eject_L
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() & COL_ALL) return 1;
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L0006
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L0006:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() & COL_ALL) return 1;
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L0008
	lda     #$01
	rts
;
; }
;
L0008:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ bg_coll_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_R: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x + Generic.width;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L0006
	inx
L0006:	sta     _temp5
	stx     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; eject_R = (temp_x + 1) & 0x0f;
;
	lda     _temp_x
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() & COL_ALL) return 1;
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L0008
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L0008:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() & COL_ALL) return 1;
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L000A
	lda     #$01
	rts
;
; }
;
L000A:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ bg_coll_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_U: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L0002
	inc     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
L0002:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y;
;
	lda     _Generic+1
	sta     _temp_y
;
; eject_U = temp_y | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if(bg_collision_sub() & COL_ALL) return 1;
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L0007
	ldx     #$00
	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L0007:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L0006
	inx
L0006:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L0004
	dec     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
L0004:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if(bg_collision_sub() & COL_ALL) return 1;
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L0009
	lda     #$01
	rts
;
; }
;
L0009:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ bg_coll_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L0002
	inc     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
L0002:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; if((temp_y & 0x0f) > 3) return 0; // bug fix
;
	and     #$0F
	cmp     #$04
	lda     #$00
	sbc     #$00
	bvs     L0004
	eor     #$80
L0004:	asl     a
	lda     #$00
	bcc     L000C
	tax
	rts
;
; eject_D = (temp_y + 1) & 0x0f;
;
L000C:	lda     _temp_y
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L000D
	ldx     #$00
	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L000D:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	txa
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L000A
	inx
L000A:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L0007
	dec     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
L0007:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L000E
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L000E:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ bg_coll_D2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D2: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L0002
	inc     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
L0002:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y += 2;
;
	lda     #$02
	clc
	adc     _temp_y
	sta     _temp_y
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L0008
	ldx     #$00
	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L0008:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	txa
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L0007
	inx
L0007:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L0004
	dec     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
L0004:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L000A
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L000A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once
;
	jsr     _set_vram_buffer
;
; load_title();
;
	jsr     _load_title
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; scroll_x = 0;
;
	ldx     #$00
	txa
	sta     _scroll_x
	sta     _scroll_x+1
;
; set_scroll_x(scroll_x);
;
	jsr     _set_scroll_x
;
; while(game_mode == MODE_TITLE){
;
	jmp     L002D
;
; ppu_wait_nmi();
;
L0005:	jsr     _ppu_wait_nmi
;
; temp1 = get_frame_count();
;
	jsr     _get_frame_count
	sta     _temp1
;
; temp1 = (temp1 >> 3) & 3;
;
	lsr     a
	lsr     a
	lsr     a
	and     #$03
	sta     _temp1
;
; pal_col(3,title_color_rotate[temp1]);
;
	lda     #$03
	jsr     pusha
	ldy     _temp1
	lda     _title_color_rotate,y
	jsr     _pal_col
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if(pad1_new & PAD_START){
;
	and     #$10
	beq     L002D
;
; pal_fade_to(4,0); // fade to black
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; ppu_off();
;
	jsr     _ppu_off
;
; load_room();
;
	jsr     _load_room
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; song = SONG_GAME;
;
	lda     #$00
	sta     _song
;
; music_play(song);
;
	jsr     _music_play
;
; scroll_x = 0;
;
	ldx     #$00
	txa
	sta     _scroll_x
	sta     _scroll_x+1
;
; set_scroll_x(scroll_x);
;
	jsr     _set_scroll_x
;
; ppu_on_all();  
;
	jsr     _ppu_on_all
;
; pal_bright(4); // back to normal brightness 
;
	lda     #$04
	jsr     _pal_bright
;
; while(game_mode == MODE_TITLE){
;
L002D:	lda     _game_mode
	beq     L0005
;
; while(game_mode == MODE_GAME){
;
	jmp     L002E
;
; ppu_wait_nmi();
;
L000A:	jsr     _ppu_wait_nmi
;
; set_music_speed(8);
;
	lda     #$08
	jsr     _set_music_speed
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; movement();
;
	jsr     _movement
;
; check_spr_objects(); // see which objects are on screen
;
	jsr     _check_spr_objects
;
; sprite_collisions();
;
	jsr     _sprite_collisions
;
; set_scroll_x(scroll_x);
;
	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; draw_screen_R();
;
	jsr     _draw_screen_R
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; if(pad1_new & PAD_START){
;
	lda     _pad1_new
	and     #$10
	beq     L000D
;
; game_mode = MODE_PAUSE;
;
	lda     #$02
	sta     _game_mode
;
; song = SONG_PAUSE;
;
	lda     #$01
	sta     _song
;
; music_play(song);
;
	jsr     _music_play
;
; color_emphasis(COL_EMP_DARK);
;
	lda     #$E0
	jsr     _color_emphasis
;
; break; // out of the game loop
;
	jmp     L0030
;
; if(level_up) {
;
L000D:	lda     _level_up
	beq     L000E
;
; game_mode = MODE_SWITCH;
;
	lda     #$03
	sta     _game_mode
;
; level_up = 0;
;
	lda     #$00
	sta     _level_up
;
; bright = 4;
;
	lda     #$04
	sta     _bright
;
; bright_count = 0;
;
	lda     #$00
	sta     _bright_count
;
; ++level;
;
	inc     _level
;
; else if(death) {
;
	jmp     L002E
L000E:	lda     _death
	beq     L002E
;
; death = 0;
;
	lda     #$00
	sta     _death
;
; bright = 0;
;
	sta     _bright
;
; scroll_x = 0;
;
	tax
	sta     _scroll_x
	sta     _scroll_x+1
;
; set_scroll_x(scroll_x);
;
	jsr     _set_scroll_x
;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; delay(5);
;
	lda     #$05
	jsr     _delay
;
; oam_clear();
;
	jsr     _oam_clear
;
; game_mode = MODE_GAME_OVER;
;
	lda     #$05
	sta     _game_mode
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024); // blank the screen
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; while(game_mode == MODE_GAME){
;
L002E:	lda     _game_mode
	cmp     #$01
	jeq     L000A
;
; while(game_mode == MODE_SWITCH){ 
;
	jmp     L0030
;
; ppu_wait_nmi();
;
L0011:	jsr     _ppu_wait_nmi
;
; ++bright_count;
;
	inc     _bright_count
;
; if(bright_count >= 0x10) { // fade out
;
	lda     _bright_count
	cmp     #$10
	bcc     L0015
;
; bright_count = 0;
;
	lda     #$00
	sta     _bright_count
;
; --bright;
;
	dec     _bright
;
; if(bright != 0xff) pal_bright(bright); // fade out
;
	lda     _bright
	cmp     #$FF
	beq     L0015
	jsr     _pal_bright
;
; set_scroll_x(scroll_x);
;
L0015:	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; if(bright == 0xff) { // now switch rooms
;
	lda     _bright
	cmp     #$FF
	bne     L0030
;
; ppu_off();
;
	jsr     _ppu_off
;
; oam_clear();
;
	jsr     _oam_clear
;
; scroll_x = 0;
;
	ldx     #$00
	txa
	sta     _scroll_x
	sta     _scroll_x+1
;
; set_scroll_x(scroll_x);
;
	jsr     _set_scroll_x
;
; if(level < 3){
;
	lda     _level
	cmp     #$03
	bcs     L002F
;
; load_room();
;
	jsr     _load_room
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; else { // set end of game. Did we win?
;
	jmp     L0037
;
; game_mode = MODE_END;
;
L002F:	lda     #$04
	sta     _game_mode
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; ppu_on_all();
;
L0037:	jsr     _ppu_on_all
;
; pal_bright(4); // back to normal brighness
;
	lda     #$04
	jsr     _pal_bright
;
; while(game_mode == MODE_SWITCH){ 
;
L0030:	lda     _game_mode
	cmp     #$03
	beq     L0011
;
; while(game_mode == MODE_PAUSE){
;
	jmp     L0031
;
; ppu_wait_nmi();
;
L0019:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; if(pad1_new & PAD_START){
;
	lda     _pad1_new
	and     #$10
	beq     L0031
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; song = SONG_GAME;
;
	lda     #$00
	sta     _song
;
; music_play(song);
;
	jsr     _music_play
;
; color_emphasis(COL_EMP_NORMAL);
;
	lda     #$00
	jsr     _color_emphasis
;
; while(game_mode == MODE_PAUSE){
;
L0031:	lda     _game_mode
	cmp     #$02
	beq     L0019
;
; while(game_mode == MODE_END){
;
	jmp     L0032
;
; ppu_wait_nmi();
;
L001D:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; multi_vram_buffer_horz(END_TEXT, sizeof(END_TEXT), NTADR_A(6,13));
;
	jsr     decsp3
	lda     #<(_END_TEXT)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_END_TEXT)
	sta     (sp),y
	lda     #$15
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A6
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(END_TEXT2, sizeof(END_TEXT2), NTADR_A(8,15));
;
	jsr     decsp3
	lda     #<(_END_TEXT2)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_END_TEXT2)
	sta     (sp),y
	lda     #$11
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$E8
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(END_TEXT3, sizeof(END_TEXT3), NTADR_A(11,17));
;
	jsr     decsp3
	lda     #<(_END_TEXT3)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_END_TEXT3)
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$2B
	jsr     _multi_vram_buffer_horz
;
; temp1 = (coins / 10) + 0x30;
;
	lda     _coins
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$30
	sta     _temp1
;
; temp2 = (coins % 10) + 0x30;
;
	lda     _coins
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _temp2
;
; one_vram_buffer(temp1, NTADR_A(18,17));
;
	lda     _temp1
	jsr     pusha
	ldx     #$22
	lda     #$32
	jsr     _one_vram_buffer
;
; one_vram_buffer(temp2, NTADR_A(19,17));
;
	lda     _temp2
	jsr     pusha
	ldx     #$22
	lda     #$33
	jsr     _one_vram_buffer
;
; set_scroll_x(0);
;
	ldx     #$00
	txa
	jsr     _set_scroll_x
;
; music_stop();
;
	jsr     _music_stop
;
; game_mode = MODE_RESET;
;
	lda     #$06
	sta     _game_mode
;
; while(game_mode == MODE_END){
;
L0032:	lda     _game_mode
	cmp     #$04
	jeq     L001D
;
; while(game_mode == MODE_GAME_OVER){ // you died, death
;
	jmp     L0033
;
; ppu_wait_nmi();
;
L0022:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; multi_vram_buffer_horz(DEAD_TEXT, sizeof(DEAD_TEXT), NTADR_A(12,14));
;
	jsr     decsp3
	lda     #<(_DEAD_TEXT)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_DEAD_TEXT)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$CC
	jsr     _multi_vram_buffer_horz
;
; set_scroll_x(0);
;
	ldx     #$00
	txa
	jsr     _set_scroll_x
;
; music_stop();
;
	jsr     _music_stop
;
; game_mode = MODE_RESET;
;
	lda     #$06
	sta     _game_mode
;
; while(game_mode == MODE_GAME_OVER){ // you died, death
;
L0033:	lda     _game_mode
	cmp     #$05
	beq     L0022
;
; while(game_mode == MODE_RESET){
;
	jmp     L0035
;
; delay(240); // 4 seconds
;
L0034:	lda     #$F0
	jsr     _delay
;
; delay(60); // 1 second
;
	lda     #$3C
	jsr     _delay
;
; ppu_wait_nmi();
;
L0028:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if(pad1_new & PAD_START){
;
	and     #$10
	beq     L0028
;
; ppu_off();
;
	jsr     _ppu_off
;
; load_title();
;
	jsr     _load_title
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; coins = 0;
;
	sta     _coins
;
; level = 0;
;
	sta     _level
;
; death = 0;
;
	sta     _death
;
; while(game_mode == MODE_RESET){
;
L0035:	lda     _game_mode
	cmp     #$06
	beq     L0034
;
; while (1){
;
	jmp     L002D

.endproc

